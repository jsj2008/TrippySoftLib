package {	import flash.display.*;//	import nl.demonsters.debugger.*;	import com.luaye.console.C;	import flash.events.*;	import flash.media.*;	import flash.system.*;	import flash.utils.*;		public class TS {		static public function fadeOut(target:DisplayObject, completeCallback:Function, fadePerSecond = 1.0, frameRate = 30.0):void {			function perFrame(e:Event):void {				target.alpha = Math.min(1.0, Math.max(0.0, target.alpha - fadePerSecond / frameRate));								if(target.alpha == 0.0 || target.alpha == 1.0) {					target.removeEventListener(Event.ENTER_FRAME, perFrame);										if(completeCallback != null)					completeCallback();				}			}						target.addEventListener(Event.ENTER_FRAME, perFrame);		}				public static function setHandCursor(target):void {			if(target is Sprite) {				target.buttonMode = true;				target.useHandCursor = true;			}						if(target is DisplayObjectContainer) {				for(var i:int = 0; i < target.numChildren; i++) {					var child = target.getChildAt(i);					setHandCursor(child);				}			}		}				public static function clickOnce(button, callback:Function):Function {			function buttonClicked(e:MouseEvent):void {				if(button.hasEventListener(MouseEvent.MOUSE_DOWN))					button.removeEventListener(MouseEvent.MOUSE_DOWN, buttonClicked);								callback();			}						button.addEventListener(MouseEvent.MOUSE_DOWN, buttonClicked);						setHandCursor(button);						function cancelClick():void {				if(button.hasEventListener(MouseEvent.MOUSE_DOWN))					button.removeEventListener(MouseEvent.MOUSE_DOWN, buttonClicked);			}						return cancelClick;		}				public static function waitUntilFrame(displayObject:MovieClip, frame:int, callback:Function, perFrameCallback:Function = null):Function {			function checkFrame(e:Event):void {				if(perFrameCallback != null) perFrameCallback();								if(displayObject.currentFrame == frame) {					if(displayObject.hasEventListener(Event.ENTER_FRAME))						displayObject.removeEventListener(Event.ENTER_FRAME, checkFrame);										callback();				}			}						displayObject.addEventListener(Event.ENTER_FRAME, checkFrame);						function cancel():void {				if(displayObject.hasEventListener(Event.ENTER_FRAME))					displayObject.removeEventListener(Event.ENTER_FRAME, checkFrame);			}						return cancel;		}				public static function playWithContinueButton(root, parent:MovieClip, stopFrame:int, continueFrame:int, completeCallback:Function, buttons:Array):void {			root.addChild(parent);						var pressedButtonName:String;			function animationComplete():void {				parent.stop();								TS.detach(parent);				parent = null;				completeCallback(pressedButtonName);			}						function continueAnimation(e:MouseEvent):void {				cancel();								for each(var buttonName:String in buttons) {					if(parent[buttonName]) {						var button = parent[buttonName];												if(e.target == button || e.target.parent == button) pressedButtonName = buttonName;												if(button.hasEventListener(MouseEvent.MOUSE_DOWN))							button.removeEventListener(MouseEvent.MOUSE_DOWN, continueAnimation);					}				}								parent.gotoAndPlay(continueFrame);				waitUntilFrame(parent, parent.totalFrames, animationComplete);			}						function stopAnimation():void {				parent.stop();			}						function keepButtonEnabled():void {				for each(var buttonName:String in buttons) {					var button = parent[buttonName];					if(button && !button.hasEventListener(MouseEvent.MOUSE_DOWN)) {						button.buttonMode = true;						button.mouseChildren = false;						button.addEventListener(MouseEvent.MOUSE_DOWN, continueAnimation);					}				}			}						var cancel:Function = waitUntilFrame(parent, stopFrame, stopAnimation, keepButtonEnabled);		}				public static function disableMouseRecursive(target, keepEnabled) {			target.mouseEnabled = false;						if(target is DisplayObjectContainer)				for(var i:int = 0; i < target.numChildren; i++) {					var child = target.getChildAt(i);										if(child != keepEnabled && child is InteractiveObject)						disableMouseRecursive(child, keepEnabled);				}		}						public static function addedToStage(parent, callback:Function) {			if(!parent.stage) {								function addedToStage2(e:Event):void {					parent.removeEventListener(Event.ADDED_TO_STAGE, addedToStage2);					callback();				}								parent.addEventListener(Event.ADDED_TO_STAGE, addedToStage2);			}			else {				callback();			}		}				public static function clampToLength(v, l) {			var length:Number = Math.sqrt(v.x * v.x + v.y * v.y);						v.x *= l / length;			v.y *= l / length;		}				public static function clamp(v, a, b) {			return Math.max(Math.min(v, b), a);		}				public static var radiansInCircle:Number = Math.PI * 2.0;		public static function normalizeAngle(angle:Number):Number {			if (angle < 0.0) return angle + radiansInCircle;			if(angle >= radiansInCircle) return angle - radiansInCircle;			return angle;		}				public static function copy(object:Object):Object {			var buffer:ByteArray = new ByteArray();			buffer.writeObject(object);			buffer.position = 0;			var result:Object = buffer.readObject();			return result;		}				public static function detach(displayObject:DisplayObject):void {			if (displayObject && displayObject.parent) {				displayObject.parent.removeChild(displayObject);			}		}				public static function initDebuggers(root):void {			// Init debugging utilities			C.startOnStage(root, "`");			C.width = root.loaderInfo.width;			C.height = root.loaderInfo.height / 2;//			new MonsterDebugger(root);		}				public static function log(message:String):void {//			MonsterDebugger.trace(null, message);			C.log(message);			trace(message);		}				public static function detachAllChildren(displayObjectContainer:DisplayObjectContainer):void {			while (displayObjectContainer.numChildren > 0)				displayObjectContainer.removeChildAt(0);		}				public static function spriteWithName(name:String, parent:DisplayObjectContainer):Sprite {			var sprite:Sprite = new Sprite();			sprite.name = name;			if(parent) parent.addChild(sprite);			return sprite;		}				public static function createBackBuffer(root:Sprite, width:int, height:int):BitmapData {			var backBuffer:BitmapData = new BitmapData(width, height, false, 0x0);			var backBufferBitmap:Bitmap = new Bitmap(backBuffer, PixelSnapping.ALWAYS, false);			root.addChildAt(backBufferBitmap, 0);			return backBuffer;		}				/*public static var soundInstances:Dictionary = new Dictionary();		public static function playSound(soundClass, loop = false, volume = 1):Function {			var snd = soundInstances[soundClass];			if(snd == null) {				snd = new soundClass();				soundInstances[soundClass] = snd;			}						var soundChannel:SoundChannel = snd.play(0, loop ? 999 : 0);						if( soundChannel == null ) {				trace( "playSound() failed: No available sound channels" );								return function() {};			}						soundChannel.soundTransform = new SoundTransform( volume );						var soundComplete = false;			var handleSoundComplete = function(e: Event) {				soundComplete = true;				if(soundChannel == null) return;								soundChannel.stop();				soundChannel.removeEventListener( Event.SOUND_COMPLETE, handleSoundComplete );				soundChannel = null;			}						soundChannel.addEventListener(Event.SOUND_COMPLETE, handleSoundComplete);						var fadeOutFunction:Function =				function(fadeOutInterval = 0) {					if(soundComplete) return; // cant fade ended sounds					if(fadeOutInterval == 0) { // a zero fade is just a stop						handleSoundComplete(null);						return;					}										var volumeDelta = (1000 / 30) / -fadeOutInterval;					var volume = 1;					var handle = setInterval(						function() {							volume += volumeDelta;														if(volume < 0) volume = 0;							if(volume > 1) volume = 1;														if( soundChannel != null && soundChannel  )								soundChannel.soundTransform = new SoundTransform(volume);															if(volume <= 0 || soundComplete) {								handleSoundComplete(null);								clearInterval(handle);							}						}, 1000 / 30);				};							return fadeOutFunction;		}*/				public static function chooseAtRandom(items:Array):* {			return items[Math.floor(Math.random() * items.length)];		}				public static function whenAvailable(instance, children:String, callback:Function):void {			var pathParts:Array = children.split(".");						var mc = new MovieClip();			mc.pathParts = pathParts;			mc.callback = callback;			mc.instance = instance;			mc.addEventListener(Event.FRAME_CONSTRUCTED, findChildren, false, 0);			instance.addChild(mc);		}				public static function findChildren(e:Event):void {			var mc = e.target;			var pathParts = mc.pathParts;			var current = mc.instance;						for(var i:int = 0; i < pathParts.length; ++i) {				var nextPart:String = pathParts[i];				current = current[nextPart];								if(current == null) {					return;				}			}						detach(mc);						mc.removeEventListener(Event.FRAME_CONSTRUCTED, findChildren);						mc.callback(current);		}	}}